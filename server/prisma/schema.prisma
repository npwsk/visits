// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  middleName String?
  email      String   @unique
  password   String
  roleId     Int
  role       Role     @relation(fields: [roleId], references: [id])
  clinics    Clinic[] @relation("ResponsibleRep")
  visits     Visit[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model Visit {
  id         Int       @id @default(autoincrement())
  startTime  DateTime
  endTime    DateTime?
  goal       String
  success    Boolean?
  report     String?
  statusId   Int
  userId     Int
  contactId  Int
  clinicId   Int
  status     Status    @relation(fields: [statusId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
  contact    Contact   @relation(fields: [contactId], references: [id])
  clinic     Clinic    @relation(fields: [clinicId], references: [id])
}


model Clinic {
  id               Int              @id @default(autoincrement())
  name             String
  address          String
  phone            String
  email            String
  legalName        String
  inn              String
  notes            String?
  responsibleRepId Int?
  responsibleRep   User?            @relation("ResponsibleRep", fields: [responsibleRepId], references: [id])
  contactClinics   ContactClinic[]
  visits           Visit[]
}

model Contact {
  id              Int              @id @default(autoincrement())
  firstName       String
  lastName        String
  middleName      String?
  specialization  String
  title           String?
  phone           String
  email           String
  contactClinics  ContactClinic[]
  visits          Visit[]
}

model ContactClinic {
  contactId Int
  clinicId  Int
  position  String
  contact   Contact @relation(fields: [contactId], references: [id])
  clinic    Clinic  @relation(fields: [clinicId], references: [id])

  @@id([contactId, clinicId])
}

model Status {
  id    Int    @id @default(autoincrement())
  name  String
  visits Visit[]
}
